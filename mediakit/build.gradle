apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

ext {
    boolean isWindow = isWindowsOS();
    if (isWindow) {
        native_sdk_path = rootDir.getAbsolutePath().replace('\\', '/') + "/mediakit"
    } else {
        native_sdk_path = file(rootDir.getAbsolutePath() + "/mediakit")
    }
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi-v7a"
        }

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }

    }

    buildTypes {

        debug{

            debuggable true
            jniDebuggable true

            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_PLATFORM=android-16', '-DANDROID_TOOLCHAIN=clang',
                            '-DANDROID_ARM_NEON=TRUE', '-DANDROID_STL=c++_static',
                            "-DPATH_TO_MEDIACORE:STRING=${native_sdk_path}"
                    cFlags '-O3', '-DGL_GLEXT_PROTOTYPES', '-DEGL_EGLEXT_PROTOTYPES', '-fsigned-char', "-I${native_sdk_path}", '-Wformat','-mfpu=neon', '-mfloat-abi=softfp -frtti' // full optimization, char data type is signed
                    // 编译优化，设置函式是否能被 inline 的伪指令长度
                    cppFlags '-O3', '-fexceptions', '-fsigned-char',
                            "-frtti -std=c++11", '-Wformat'


                }
            }
        }
        
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    api "io.reactivex.rxjava2:rxjava:2.1.12"
    api "io.reactivex.rxjava2:rxandroid:2.0.2"

    api('com.jadynai.ai.kotlind:KotlinD:1.0.7')

    implementation 'androidx.appcompat:appcompat:1.1.0'
}

clean.doFirst {
    delete "${projectDir}/.externalNativeBuild"
}

/** 判断是否为Windows操作系统 */
boolean isWindowsOS() {
    boolean isWindowsOS = false;
    String osName = System.getProperty("os.name")
    println("os.name=" + osName)
    if (osName == null || "".equals(osName)) {
        return false
    }
    if (osName.toLowerCase().indexOf("windows") > -1) {
        isWindowsOS = true
    }
    return isWindowsOS
}
